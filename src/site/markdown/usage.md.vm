## Velocity treats double hashes as comments, which messes with markdown files. So $H can be used instead.
#set( $H = '#' )

Usage
-----

Add the plugin to your pom:

```xml
    <build>
        <plugins>
        ....
            <plugin>
                <groupId>io.github.parj</groupId>
                <artifactId>createk8syaml-maven-plugin</artifactId>
                <version>0.0.3</version>
                <configuration>
                    <namespace>thisisaspace</namespace>
                    <image>gcr.io/etc</image>
                    <path>/foo</path>
                    <host>localhost</host>
                </configuration>
                <executions>
                    <execution>
                      <phase>package</phase>
                      <goals>
                          <goal>create-k8s-yaml</goal>
                      </goals>
                    </execution>
                </executions>
            </plugin>
```

And then call the plugin:

        mvn io.github.parj:createk8syaml-maven-plugin:createk8syaml

Parameters
-----------

| Parameter Name | Defaults | Description |
| -------------- | -------- | ----------- |
| `name` | The name of the project is taken, this is converted to lowercase | The name of the application. By default, the name of the project is taken, this is converted to lowercase and then plugged in |
| `namespace` | `default` | Name of the Kubernetes application to use in the deployment, service and ingress. If not provided, this defaults to `default`. |
| `port` | `8080` | The application port to be exposed. If not provided `8080` is exposed by default |
| `image` |  | The docker image registry url to use. Example: `parjanya/samplespringbootapp`|
| `path` |  | The end point of the application to be exposed. Example `/foo/bar` |
| `host` | `localhost` | The host for the ingress. If not provided `localhost` is provided |
| `readinessProbePath` |  | Path for the readiness probe for Kubernetes. Ex. `/hello/actuator/health`.|
| `livenessProbePath` |  | Path for the liveness probe for Kubernetes. Ex. `/hello/actuator/customHealthCheck`|

 
Using with Jib/Fabric/Spotify Docker plugin
-------------------------------------------

If you are using [jib](https://github.com/GoogleContainerTools/jib) or [fabric8](https://github.com/fabric8io/docker-maven-plugin) or [spotify docker plugin](https://github.com/spotify/dockerfile-maven), define the docker image name as a variable and then use it both places. 

Within the `properties` section of the pom.xml, define a variable to hold the docker image name

```xml
    <properties>
        <docker.image>docker.io/parjanya/${project.name}:${project.version}</docker.image>
    </properties>
```

In the plugin, use it as follows

```xml
            <plugin>
                <groupId>io.github.parj</groupId>
                <artifactId>createk8syaml-maven-plugin</artifactId>
                <version>0.0.3</version>
                <configuration>
                    <namespace>thisisaspace</namespace>
                    <image>${docker.image}</image>
                    <path>/foo</path>
                    <host>localhost</host>
                </configuration>
                <executions>
                    <execution>
                      <phase>package</phase>
                      <goals>
                          <goal>createk8syaml</goal>
                      </goals>
                    </execution>
                </executions>
            </plugin>
```

and if you are using one of the plugins to create the docker image,

```xml
            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>2.5.2</version>
                <configuration>
                    <from>
                        <image>gcr.io/distroless/java:11</image>
                    </from>
                    <to>
                        <image>${docker.image}</image>
                    </to>
                </configuration>
            </plugin>
```



Kubernetes
----------

For more details on what is a

* Kubernetes deployment, please see [link](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)
* Kubernetes service, please see [link](https://kubernetes.io/docs/concepts/services-networking/service/)
* Kubernetes ingress, please see [link](https://kubernetes.io/docs/concepts/services-networking/ingress/)